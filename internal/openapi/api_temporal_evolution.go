/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// TemporalEvolutionApiService TemporalEvolutionApi service
type TemporalEvolutionApiService service

type ApiAddTemporalEntityAttrsRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	entityId string
	requestBody *map[string]OneOfarrayarrayarray
}

func (r ApiAddTemporalEntityAttrsRequest) RequestBody(requestBody map[string]OneOfarrayarrayarray) ApiAddTemporalEntityAttrsRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiAddTemporalEntityAttrsRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddTemporalEntityAttrsExecute(r)
}

/*
AddTemporalEntityAttrs Method for AddTemporalEntityAttrs

Add new attributes to an existing Temporal Entity within an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @return ApiAddTemporalEntityAttrsRequest
*/
func (a *TemporalEvolutionApiService) AddTemporalEntityAttrs(ctx context.Context, entityId string) ApiAddTemporalEntityAttrsRequest {
	return ApiAddTemporalEntityAttrsRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
	}
}

// Execute executes the request
func (a *TemporalEvolutionApiService) AddTemporalEntityAttrsExecute(r ApiAddTemporalEntityAttrsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.AddTemporalEntityAttrs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/{entityId}/attrs/"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateUpdateEntityTemporalRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	requestBody *map[string]OneOfarrayarrayarray
}

func (r ApiCreateUpdateEntityTemporalRequest) RequestBody(requestBody map[string]OneOfarrayarrayarray) ApiCreateUpdateEntityTemporalRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiCreateUpdateEntityTemporalRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateUpdateEntityTemporalExecute(r)
}

/*
CreateUpdateEntityTemporal Method for CreateUpdateEntityTemporal

Create or update temporal representation of an Entity within an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUpdateEntityTemporalRequest
*/
func (a *TemporalEvolutionApiService) CreateUpdateEntityTemporal(ctx context.Context) ApiCreateUpdateEntityTemporalRequest {
	return ApiCreateUpdateEntityTemporalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *TemporalEvolutionApiService) CreateUpdateEntityTemporalExecute(r ApiCreateUpdateEntityTemporalRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.CreateUpdateEntityTemporal")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiModifyEntityTemporalAttrInstanceRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	entityId string
	attrId string
	instanceId string
	requestBody *map[string]OneOfarrayarrayarray
}

func (r ApiModifyEntityTemporalAttrInstanceRequest) RequestBody(requestBody map[string]OneOfarrayarrayarray) ApiModifyEntityTemporalAttrInstanceRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiModifyEntityTemporalAttrInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ModifyEntityTemporalAttrInstanceExecute(r)
}

/*
ModifyEntityTemporalAttrInstance Method for ModifyEntityTemporalAttrInstance

Allows modifying a specific Attribute (Property or Relationship) instance, identified by its instanceId, of a Temporal Representation of an Entity.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @param attrId Attribute Id
 @param instanceId Instance Id
 @return ApiModifyEntityTemporalAttrInstanceRequest
*/
func (a *TemporalEvolutionApiService) ModifyEntityTemporalAttrInstance(ctx context.Context, entityId string, attrId string, instanceId string) ApiModifyEntityTemporalAttrInstanceRequest {
	return ApiModifyEntityTemporalAttrInstanceRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
		attrId: attrId,
		instanceId: instanceId,
	}
}

// Execute executes the request
func (a *TemporalEvolutionApiService) ModifyEntityTemporalAttrInstanceExecute(r ApiModifyEntityTemporalAttrInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.ModifyEntityTemporalAttrInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/{entityId}/attrs/{attrId}/{instanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attrId"+"}", url.PathEscape(parameterToString(r.attrId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.attrId) < 1 {
		return nil, reportError("attrId must have at least 1 elements")
	}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiQueryTemporalEntitiesRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	link *string
	id *string
	idPattern *string
	type_ *string
	attrs *string
	q *string
	georel *string
	geometry *string
	coordinates *string
	geoproperty *string
	timerel *Timerel
	timeproperty *string
	timeAt *time.Time
	endTimeAt *time.Time
	csf *string
	pageSize *int32
	pageAnchor *string
	limit *int32
	options *string
	lastN *int32
}

// Link header to be used as described in the json-ld spec.
func (r ApiQueryTemporalEntitiesRequest) Link(link string) ApiQueryTemporalEntitiesRequest {
	r.link = &link
	return r
}

// Comma separated list of URIs to be retrieved
func (r ApiQueryTemporalEntitiesRequest) Id(id string) ApiQueryTemporalEntitiesRequest {
	r.id = &id
	return r
}

// Regular expression that must be matched by Entity ids
func (r ApiQueryTemporalEntitiesRequest) IdPattern(idPattern string) ApiQueryTemporalEntitiesRequest {
	r.idPattern = &idPattern
	return r
}

// Comma separated list of Entity type names to be retrieved
func (r ApiQueryTemporalEntitiesRequest) Type_(type_ string) ApiQueryTemporalEntitiesRequest {
	r.type_ = &type_
	return r
}

// Comma separated list of attribute names (properties or relationships) to be retrieved
func (r ApiQueryTemporalEntitiesRequest) Attrs(attrs string) ApiQueryTemporalEntitiesRequest {
	r.attrs = &attrs
	return r
}

// Query
func (r ApiQueryTemporalEntitiesRequest) Q(q string) ApiQueryTemporalEntitiesRequest {
	r.q = &q
	return r
}

// Geo-relationship
func (r ApiQueryTemporalEntitiesRequest) Georel(georel string) ApiQueryTemporalEntitiesRequest {
	r.georel = &georel
	return r
}

// Geometry
func (r ApiQueryTemporalEntitiesRequest) Geometry(geometry string) ApiQueryTemporalEntitiesRequest {
	r.geometry = &geometry
	return r
}

// Coordinates serialized as a string
func (r ApiQueryTemporalEntitiesRequest) Coordinates(coordinates string) ApiQueryTemporalEntitiesRequest {
	r.coordinates = &coordinates
	return r
}

// The name of the property that contains the geo-spatial data that will be used to resolve the geoquery
func (r ApiQueryTemporalEntitiesRequest) Geoproperty(geoproperty string) ApiQueryTemporalEntitiesRequest {
	r.geoproperty = &geoproperty
	return r
}

// Time relationship
func (r ApiQueryTemporalEntitiesRequest) Timerel(timerel Timerel) ApiQueryTemporalEntitiesRequest {
	r.timerel = &timerel
	return r
}

// The name of the property that contains the temporal data that will be used to resolve the temporal query
func (r ApiQueryTemporalEntitiesRequest) Timeproperty(timeproperty string) ApiQueryTemporalEntitiesRequest {
	r.timeproperty = &timeproperty
	return r
}

// start time for temporal query
func (r ApiQueryTemporalEntitiesRequest) TimeAt(timeAt time.Time) ApiQueryTemporalEntitiesRequest {
	r.timeAt = &timeAt
	return r
}

// end time for temporal query
func (r ApiQueryTemporalEntitiesRequest) EndTimeAt(endTimeAt time.Time) ApiQueryTemporalEntitiesRequest {
	r.endTimeAt = &endTimeAt
	return r
}

// Context Source Filter
func (r ApiQueryTemporalEntitiesRequest) Csf(csf string) ApiQueryTemporalEntitiesRequest {
	r.csf = &csf
	return r
}

// Size of the page to be returned
func (r ApiQueryTemporalEntitiesRequest) PageSize(pageSize int32) ApiQueryTemporalEntitiesRequest {
	r.pageSize = &pageSize
	return r
}

// Size of the page to be returned
func (r ApiQueryTemporalEntitiesRequest) PageAnchor(pageAnchor string) ApiQueryTemporalEntitiesRequest {
	r.pageAnchor = &pageAnchor
	return r
}

// Pagination limit
func (r ApiQueryTemporalEntitiesRequest) Limit(limit int32) ApiQueryTemporalEntitiesRequest {
	r.limit = &limit
	return r
}

// Options dictionary
func (r ApiQueryTemporalEntitiesRequest) Options(options string) ApiQueryTemporalEntitiesRequest {
	r.options = &options
	return r
}

// Only retrieve last N instances
func (r ApiQueryTemporalEntitiesRequest) LastN(lastN int32) ApiQueryTemporalEntitiesRequest {
	r.lastN = &lastN
	return r
}

func (r ApiQueryTemporalEntitiesRequest) Execute() ([]EntityTemporal, *http.Response, error) {
	return r.ApiService.QueryTemporalEntitiesExecute(r)
}

/*
QueryTemporalEntities Method for QueryTemporalEntities

Query temporal evolution of Entities from an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryTemporalEntitiesRequest
*/
func (a *TemporalEvolutionApiService) QueryTemporalEntities(ctx context.Context) ApiQueryTemporalEntitiesRequest {
	return ApiQueryTemporalEntitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []EntityTemporal
func (a *TemporalEvolutionApiService) QueryTemporalEntitiesExecute(r ApiQueryTemporalEntitiesRequest) ([]EntityTemporal, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EntityTemporal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.QueryTemporalEntities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.idPattern != nil {
		localVarQueryParams.Add("idPattern", parameterToString(*r.idPattern, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.attrs != nil {
		localVarQueryParams.Add("attrs", parameterToString(*r.attrs, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.georel != nil {
		localVarQueryParams.Add("georel", parameterToString(*r.georel, ""))
	}
	if r.geometry != nil {
		localVarQueryParams.Add("geometry", parameterToString(*r.geometry, ""))
	}
	if r.coordinates != nil {
		localVarQueryParams.Add("coordinates", parameterToString(*r.coordinates, ""))
	}
	if r.geoproperty != nil {
		localVarQueryParams.Add("geoproperty", parameterToString(*r.geoproperty, ""))
	}
	if r.timerel != nil {
		localVarQueryParams.Add("timerel", parameterToString(*r.timerel, ""))
	}
	if r.timeproperty != nil {
		localVarQueryParams.Add("timeproperty", parameterToString(*r.timeproperty, ""))
	}
	if r.timeAt != nil {
		localVarQueryParams.Add("timeAt", parameterToString(*r.timeAt, ""))
	}
	if r.endTimeAt != nil {
		localVarQueryParams.Add("endTimeAt", parameterToString(*r.endTimeAt, ""))
	}
	if r.csf != nil {
		localVarQueryParams.Add("csf", parameterToString(*r.csf, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.pageAnchor != nil {
		localVarQueryParams.Add("pageAnchor", parameterToString(*r.pageAnchor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	if r.lastN != nil {
		localVarQueryParams.Add("lastN", parameterToString(*r.lastN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.link != nil {
		localVarHeaderParams["Link"] = parameterToString(*r.link, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryTemporalEntitiesOnPostRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	query *Query
	link *string
	pageSize *int32
	pageAnchor *string
	limit *int32
	options *string
	lastN *int32
}

func (r ApiQueryTemporalEntitiesOnPostRequest) Query(query Query) ApiQueryTemporalEntitiesOnPostRequest {
	r.query = &query
	return r
}

// Link header to be used as described in the json-ld spec.
func (r ApiQueryTemporalEntitiesOnPostRequest) Link(link string) ApiQueryTemporalEntitiesOnPostRequest {
	r.link = &link
	return r
}

// Size of the page to be returned
func (r ApiQueryTemporalEntitiesOnPostRequest) PageSize(pageSize int32) ApiQueryTemporalEntitiesOnPostRequest {
	r.pageSize = &pageSize
	return r
}

// Size of the page to be returned
func (r ApiQueryTemporalEntitiesOnPostRequest) PageAnchor(pageAnchor string) ApiQueryTemporalEntitiesOnPostRequest {
	r.pageAnchor = &pageAnchor
	return r
}

// Pagination limit
func (r ApiQueryTemporalEntitiesOnPostRequest) Limit(limit int32) ApiQueryTemporalEntitiesOnPostRequest {
	r.limit = &limit
	return r
}

// Options dictionary
func (r ApiQueryTemporalEntitiesOnPostRequest) Options(options string) ApiQueryTemporalEntitiesOnPostRequest {
	r.options = &options
	return r
}

// Only retrieve last N instances
func (r ApiQueryTemporalEntitiesOnPostRequest) LastN(lastN int32) ApiQueryTemporalEntitiesOnPostRequest {
	r.lastN = &lastN
	return r
}

func (r ApiQueryTemporalEntitiesOnPostRequest) Execute() ([]EntityTemporal, *http.Response, error) {
	return r.ApiService.QueryTemporalEntitiesOnPostExecute(r)
}

/*
QueryTemporalEntitiesOnPost Method for QueryTemporalEntitiesOnPost

Query temporal evolution of Entities from an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryTemporalEntitiesOnPostRequest
*/
func (a *TemporalEvolutionApiService) QueryTemporalEntitiesOnPost(ctx context.Context) ApiQueryTemporalEntitiesOnPostRequest {
	return ApiQueryTemporalEntitiesOnPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []EntityTemporal
func (a *TemporalEvolutionApiService) QueryTemporalEntitiesOnPostExecute(r ApiQueryTemporalEntitiesOnPostRequest) ([]EntityTemporal, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EntityTemporal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.QueryTemporalEntitiesOnPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entityOperations/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.pageAnchor != nil {
		localVarQueryParams.Add("pageAnchor", parameterToString(*r.pageAnchor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	if r.lastN != nil {
		localVarQueryParams.Add("lastN", parameterToString(*r.lastN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.link != nil {
		localVarHeaderParams["Link"] = parameterToString(*r.link, "")
	}
	// body params
	localVarPostBody = r.query
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveEntityTemporalAttrRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	entityId string
	attrId string
}

func (r ApiRemoveEntityTemporalAttrRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveEntityTemporalAttrExecute(r)
}

/*
RemoveEntityTemporalAttr Method for RemoveEntityTemporalAttr

Attribute from Temporal Representation of Entity deletion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @param attrId Attribute Id
 @return ApiRemoveEntityTemporalAttrRequest
*/
func (a *TemporalEvolutionApiService) RemoveEntityTemporalAttr(ctx context.Context, entityId string, attrId string) ApiRemoveEntityTemporalAttrRequest {
	return ApiRemoveEntityTemporalAttrRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
		attrId: attrId,
	}
}

// Execute executes the request
func (a *TemporalEvolutionApiService) RemoveEntityTemporalAttrExecute(r ApiRemoveEntityTemporalAttrRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.RemoveEntityTemporalAttr")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/{entityId}/attrs/{attrId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attrId"+"}", url.PathEscape(parameterToString(r.attrId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.attrId) < 1 {
		return nil, reportError("attrId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveEntityTemporalAttrInstanceRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	entityId string
	attrId string
	instanceId string
}

func (r ApiRemoveEntityTemporalAttrInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveEntityTemporalAttrInstanceExecute(r)
}

/*
RemoveEntityTemporalAttrInstance Method for RemoveEntityTemporalAttrInstance

Attribute Instance deletion by instance id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @param attrId Attribute Id
 @param instanceId Instance Id
 @return ApiRemoveEntityTemporalAttrInstanceRequest
*/
func (a *TemporalEvolutionApiService) RemoveEntityTemporalAttrInstance(ctx context.Context, entityId string, attrId string, instanceId string) ApiRemoveEntityTemporalAttrInstanceRequest {
	return ApiRemoveEntityTemporalAttrInstanceRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
		attrId: attrId,
		instanceId: instanceId,
	}
}

// Execute executes the request
func (a *TemporalEvolutionApiService) RemoveEntityTemporalAttrInstanceExecute(r ApiRemoveEntityTemporalAttrInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.RemoveEntityTemporalAttrInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/{entityId}/attrs/{attrId}/{instanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attrId"+"}", url.PathEscape(parameterToString(r.attrId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.attrId) < 1 {
		return nil, reportError("attrId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveEntityTemporalByIdRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	entityId string
	type_ *string
}

// Entity Type
func (r ApiRemoveEntityTemporalByIdRequest) Type_(type_ string) ApiRemoveEntityTemporalByIdRequest {
	r.type_ = &type_
	return r
}

func (r ApiRemoveEntityTemporalByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveEntityTemporalByIdExecute(r)
}

/*
RemoveEntityTemporalById Method for RemoveEntityTemporalById

Removes the temporal representation of an Entity from an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @return ApiRemoveEntityTemporalByIdRequest
*/
func (a *TemporalEvolutionApiService) RemoveEntityTemporalById(ctx context.Context, entityId string) ApiRemoveEntityTemporalByIdRequest {
	return ApiRemoveEntityTemporalByIdRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
	}
}

// Execute executes the request
func (a *TemporalEvolutionApiService) RemoveEntityTemporalByIdExecute(r ApiRemoveEntityTemporalByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.RemoveEntityTemporalById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/{entityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRetrieveEntityTemporalByIdRequest struct {
	ctx context.Context
	ApiService *TemporalEvolutionApiService
	entityId string
	link *string
	attrs *string
	options *string
	timerel *Timerel
	timeproperty *string
	timeAt *time.Time
	endTimeAt *time.Time
	lastN *int32
}

// Link header to be used as described in the json-ld spec.
func (r ApiRetrieveEntityTemporalByIdRequest) Link(link string) ApiRetrieveEntityTemporalByIdRequest {
	r.link = &link
	return r
}

// Comma separated list of attribute names (properties or relationships) to be retrieved
func (r ApiRetrieveEntityTemporalByIdRequest) Attrs(attrs string) ApiRetrieveEntityTemporalByIdRequest {
	r.attrs = &attrs
	return r
}

// Options dictionary
func (r ApiRetrieveEntityTemporalByIdRequest) Options(options string) ApiRetrieveEntityTemporalByIdRequest {
	r.options = &options
	return r
}

// Time relationship
func (r ApiRetrieveEntityTemporalByIdRequest) Timerel(timerel Timerel) ApiRetrieveEntityTemporalByIdRequest {
	r.timerel = &timerel
	return r
}

// The name of the property that contains the temporal data that will be used to resolve the temporal query
func (r ApiRetrieveEntityTemporalByIdRequest) Timeproperty(timeproperty string) ApiRetrieveEntityTemporalByIdRequest {
	r.timeproperty = &timeproperty
	return r
}

// start time for temporal query
func (r ApiRetrieveEntityTemporalByIdRequest) TimeAt(timeAt time.Time) ApiRetrieveEntityTemporalByIdRequest {
	r.timeAt = &timeAt
	return r
}

// end time for temporal query
func (r ApiRetrieveEntityTemporalByIdRequest) EndTimeAt(endTimeAt time.Time) ApiRetrieveEntityTemporalByIdRequest {
	r.endTimeAt = &endTimeAt
	return r
}

// Only retrieve last N instances
func (r ApiRetrieveEntityTemporalByIdRequest) LastN(lastN int32) ApiRetrieveEntityTemporalByIdRequest {
	r.lastN = &lastN
	return r
}

func (r ApiRetrieveEntityTemporalByIdRequest) Execute() (*EntityTemporal, *http.Response, error) {
	return r.ApiService.RetrieveEntityTemporalByIdExecute(r)
}

/*
RetrieveEntityTemporalById Method for RetrieveEntityTemporalById

Retrieve the temporal representation of an specific Entity from an NGSI-LD system. It's possible to specify the Entity attributes to be retrieved by using query parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @return ApiRetrieveEntityTemporalByIdRequest
*/
func (a *TemporalEvolutionApiService) RetrieveEntityTemporalById(ctx context.Context, entityId string) ApiRetrieveEntityTemporalByIdRequest {
	return ApiRetrieveEntityTemporalByIdRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
	}
}

// Execute executes the request
//  @return EntityTemporal
func (a *TemporalEvolutionApiService) RetrieveEntityTemporalByIdExecute(r ApiRetrieveEntityTemporalByIdRequest) (*EntityTemporal, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EntityTemporal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemporalEvolutionApiService.RetrieveEntityTemporalById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/temporal/entities/{entityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attrs != nil {
		localVarQueryParams.Add("attrs", parameterToString(*r.attrs, ""))
	}
	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	if r.timerel != nil {
		localVarQueryParams.Add("timerel", parameterToString(*r.timerel, ""))
	}
	if r.timeproperty != nil {
		localVarQueryParams.Add("timeproperty", parameterToString(*r.timeproperty, ""))
	}
	if r.timeAt != nil {
		localVarQueryParams.Add("timeAt", parameterToString(*r.timeAt, ""))
	}
	if r.endTimeAt != nil {
		localVarQueryParams.Add("endTimeAt", parameterToString(*r.endTimeAt, ""))
	}
	if r.lastN != nil {
		localVarQueryParams.Add("lastN", parameterToString(*r.lastN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.link != nil {
		localVarHeaderParams["Link"] = parameterToString(*r.link, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
