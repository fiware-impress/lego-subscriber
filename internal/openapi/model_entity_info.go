/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntityInfo struct for EntityInfo
type EntityInfo struct {
	Id map[string]interface{} `json:"id,omitempty"`
	Type string `json:"type"`
	IdPattern *string `json:"idPattern,omitempty"`
}

// NewEntityInfo instantiates a new EntityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityInfo(type_ string) *EntityInfo {
	this := EntityInfo{}
	this.Type = type_
	return &this
}

// NewEntityInfoWithDefaults instantiates a new EntityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityInfoWithDefaults() *EntityInfo {
	this := EntityInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EntityInfo) GetId() map[string]interface{} {
	if o == nil || o.Id == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityInfo) GetIdOk() (map[string]interface{}, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EntityInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given map[string]interface{} and assigns it to the Id field.
func (o *EntityInfo) SetId(v map[string]interface{}) {
	o.Id = v
}

// GetType returns the Type field value
func (o *EntityInfo) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EntityInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EntityInfo) SetType(v string) {
	o.Type = v
}

// GetIdPattern returns the IdPattern field value if set, zero value otherwise.
func (o *EntityInfo) GetIdPattern() string {
	if o == nil || o.IdPattern == nil {
		var ret string
		return ret
	}
	return *o.IdPattern
}

// GetIdPatternOk returns a tuple with the IdPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityInfo) GetIdPatternOk() (*string, bool) {
	if o == nil || o.IdPattern == nil {
		return nil, false
	}
	return o.IdPattern, true
}

// HasIdPattern returns a boolean if a field has been set.
func (o *EntityInfo) HasIdPattern() bool {
	if o != nil && o.IdPattern != nil {
		return true
	}

	return false
}

// SetIdPattern gets a reference to the given string and assigns it to the IdPattern field.
func (o *EntityInfo) SetIdPattern(v string) {
	o.IdPattern = &v
}

func (o EntityInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.IdPattern != nil {
		toSerialize["idPattern"] = o.IdPattern
	}
	return json.Marshal(toSerialize)
}

type NullableEntityInfo struct {
	value *EntityInfo
	isSet bool
}

func (v NullableEntityInfo) Get() *EntityInfo {
	return v.value
}

func (v *NullableEntityInfo) Set(val *EntityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityInfo(val *EntityInfo) *NullableEntityInfo {
	return &NullableEntityInfo{value: val, isSet: true}
}

func (v NullableEntityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


