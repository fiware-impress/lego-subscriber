/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TimeInterval struct for TimeInterval
type TimeInterval struct {
	Start time.Time `json:"start"`
	End *time.Time `json:"end,omitempty"`
}

// NewTimeInterval instantiates a new TimeInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeInterval(start time.Time) *TimeInterval {
	this := TimeInterval{}
	this.Start = start
	return &this
}

// NewTimeIntervalWithDefaults instantiates a new TimeInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeIntervalWithDefaults() *TimeInterval {
	this := TimeInterval{}
	return &this
}

// GetStart returns the Start field value
func (o *TimeInterval) GetStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *TimeInterval) GetStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *TimeInterval) SetStart(v time.Time) {
	o.Start = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *TimeInterval) GetEnd() time.Time {
	if o == nil || o.End == nil {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeInterval) GetEndOk() (*time.Time, bool) {
	if o == nil || o.End == nil {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *TimeInterval) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *TimeInterval) SetEnd(v time.Time) {
	o.End = &v
}

func (o TimeInterval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	return json.Marshal(toSerialize)
}

type NullableTimeInterval struct {
	value *TimeInterval
	isSet bool
}

func (v NullableTimeInterval) Get() *TimeInterval {
	return v.value
}

func (v *NullableTimeInterval) Set(val *TimeInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeInterval(val *TimeInterval) *NullableTimeInterval {
	return &NullableTimeInterval{value: val, isSet: true}
}

func (v NullableTimeInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


