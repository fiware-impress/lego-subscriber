/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SubscriptionFragment struct for SubscriptionFragment
type SubscriptionFragment struct {
	Context map[string]interface{} `json:"@context,omitempty"`
	Entities []EntityInfo `json:"entities,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	WatchedAttributes []string `json:"watchedAttributes,omitempty"`
	TimeInterval *float32 `json:"timeInterval,omitempty"`
	Expires *time.Time `json:"expires,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
	Throttling *float32 `json:"throttling,omitempty"`
	Q *string `json:"q,omitempty"`
	GeoQ *GeoQuery `json:"geoQ,omitempty"`
	Csf *string `json:"csf,omitempty"`
}

// NewSubscriptionFragment instantiates a new SubscriptionFragment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionFragment() *SubscriptionFragment {
	this := SubscriptionFragment{}
	return &this
}

// NewSubscriptionFragmentWithDefaults instantiates a new SubscriptionFragment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionFragmentWithDefaults() *SubscriptionFragment {
	this := SubscriptionFragment{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetContext() map[string]interface{} {
	if o == nil || o.Context == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *SubscriptionFragment) SetContext(v map[string]interface{}) {
	o.Context = v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetEntities() []EntityInfo {
	if o == nil || o.Entities == nil {
		var ret []EntityInfo
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetEntitiesOk() ([]EntityInfo, bool) {
	if o == nil || o.Entities == nil {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasEntities() bool {
	if o != nil && o.Entities != nil {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []EntityInfo and assigns it to the Entities field.
func (o *SubscriptionFragment) SetEntities(v []EntityInfo) {
	o.Entities = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubscriptionFragment) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SubscriptionFragment) SetDescription(v string) {
	o.Description = &v
}

// GetWatchedAttributes returns the WatchedAttributes field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetWatchedAttributes() []string {
	if o == nil || o.WatchedAttributes == nil {
		var ret []string
		return ret
	}
	return o.WatchedAttributes
}

// GetWatchedAttributesOk returns a tuple with the WatchedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetWatchedAttributesOk() ([]string, bool) {
	if o == nil || o.WatchedAttributes == nil {
		return nil, false
	}
	return o.WatchedAttributes, true
}

// HasWatchedAttributes returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasWatchedAttributes() bool {
	if o != nil && o.WatchedAttributes != nil {
		return true
	}

	return false
}

// SetWatchedAttributes gets a reference to the given []string and assigns it to the WatchedAttributes field.
func (o *SubscriptionFragment) SetWatchedAttributes(v []string) {
	o.WatchedAttributes = v
}

// GetTimeInterval returns the TimeInterval field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetTimeInterval() float32 {
	if o == nil || o.TimeInterval == nil {
		var ret float32
		return ret
	}
	return *o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetTimeIntervalOk() (*float32, bool) {
	if o == nil || o.TimeInterval == nil {
		return nil, false
	}
	return o.TimeInterval, true
}

// HasTimeInterval returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasTimeInterval() bool {
	if o != nil && o.TimeInterval != nil {
		return true
	}

	return false
}

// SetTimeInterval gets a reference to the given float32 and assigns it to the TimeInterval field.
func (o *SubscriptionFragment) SetTimeInterval(v float32) {
	o.TimeInterval = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetExpires() time.Time {
	if o == nil || o.Expires == nil {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetExpiresOk() (*time.Time, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *SubscriptionFragment) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *SubscriptionFragment) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetThrottling returns the Throttling field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetThrottling() float32 {
	if o == nil || o.Throttling == nil {
		var ret float32
		return ret
	}
	return *o.Throttling
}

// GetThrottlingOk returns a tuple with the Throttling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetThrottlingOk() (*float32, bool) {
	if o == nil || o.Throttling == nil {
		return nil, false
	}
	return o.Throttling, true
}

// HasThrottling returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasThrottling() bool {
	if o != nil && o.Throttling != nil {
		return true
	}

	return false
}

// SetThrottling gets a reference to the given float32 and assigns it to the Throttling field.
func (o *SubscriptionFragment) SetThrottling(v float32) {
	o.Throttling = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetQ() string {
	if o == nil || o.Q == nil {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetQOk() (*string, bool) {
	if o == nil || o.Q == nil {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasQ() bool {
	if o != nil && o.Q != nil {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *SubscriptionFragment) SetQ(v string) {
	o.Q = &v
}

// GetGeoQ returns the GeoQ field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetGeoQ() GeoQuery {
	if o == nil || o.GeoQ == nil {
		var ret GeoQuery
		return ret
	}
	return *o.GeoQ
}

// GetGeoQOk returns a tuple with the GeoQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetGeoQOk() (*GeoQuery, bool) {
	if o == nil || o.GeoQ == nil {
		return nil, false
	}
	return o.GeoQ, true
}

// HasGeoQ returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasGeoQ() bool {
	if o != nil && o.GeoQ != nil {
		return true
	}

	return false
}

// SetGeoQ gets a reference to the given GeoQuery and assigns it to the GeoQ field.
func (o *SubscriptionFragment) SetGeoQ(v GeoQuery) {
	o.GeoQ = &v
}

// GetCsf returns the Csf field value if set, zero value otherwise.
func (o *SubscriptionFragment) GetCsf() string {
	if o == nil || o.Csf == nil {
		var ret string
		return ret
	}
	return *o.Csf
}

// GetCsfOk returns a tuple with the Csf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionFragment) GetCsfOk() (*string, bool) {
	if o == nil || o.Csf == nil {
		return nil, false
	}
	return o.Csf, true
}

// HasCsf returns a boolean if a field has been set.
func (o *SubscriptionFragment) HasCsf() bool {
	if o != nil && o.Csf != nil {
		return true
	}

	return false
}

// SetCsf gets a reference to the given string and assigns it to the Csf field.
func (o *SubscriptionFragment) SetCsf(v string) {
	o.Csf = &v
}

func (o SubscriptionFragment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["@context"] = o.Context
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.WatchedAttributes != nil {
		toSerialize["watchedAttributes"] = o.WatchedAttributes
	}
	if o.TimeInterval != nil {
		toSerialize["timeInterval"] = o.TimeInterval
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.IsActive != nil {
		toSerialize["isActive"] = o.IsActive
	}
	if o.Throttling != nil {
		toSerialize["throttling"] = o.Throttling
	}
	if o.Q != nil {
		toSerialize["q"] = o.Q
	}
	if o.GeoQ != nil {
		toSerialize["geoQ"] = o.GeoQ
	}
	if o.Csf != nil {
		toSerialize["csf"] = o.Csf
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionFragment struct {
	value *SubscriptionFragment
	isSet bool
}

func (v NullableSubscriptionFragment) Get() *SubscriptionFragment {
	return v.value
}

func (v *NullableSubscriptionFragment) Set(val *SubscriptionFragment) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionFragment) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionFragment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionFragment(val *SubscriptionFragment) *NullableSubscriptionFragment {
	return &NullableSubscriptionFragment{value: val, isSet: true}
}

func (v NullableSubscriptionFragment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionFragment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


