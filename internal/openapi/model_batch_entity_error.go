/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BatchEntityError struct for BatchEntityError
type BatchEntityError struct {
	EntityId *string `json:"entityId,omitempty"`
	Error *ProblemDetails `json:"error,omitempty"`
}

// NewBatchEntityError instantiates a new BatchEntityError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchEntityError() *BatchEntityError {
	this := BatchEntityError{}
	return &this
}

// NewBatchEntityErrorWithDefaults instantiates a new BatchEntityError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchEntityErrorWithDefaults() *BatchEntityError {
	this := BatchEntityError{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *BatchEntityError) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntityError) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *BatchEntityError) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *BatchEntityError) SetEntityId(v string) {
	o.EntityId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BatchEntityError) GetError() ProblemDetails {
	if o == nil || o.Error == nil {
		var ret ProblemDetails
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntityError) GetErrorOk() (*ProblemDetails, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BatchEntityError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ProblemDetails and assigns it to the Error field.
func (o *BatchEntityError) SetError(v ProblemDetails) {
	o.Error = &v
}

func (o BatchEntityError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableBatchEntityError struct {
	value *BatchEntityError
	isSet bool
}

func (v NullableBatchEntityError) Get() *BatchEntityError {
	return v.value
}

func (v *NullableBatchEntityError) Set(val *BatchEntityError) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchEntityError) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchEntityError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchEntityError(val *BatchEntityError) *NullableBatchEntityError {
	return &NullableBatchEntityError{value: val, isSet: true}
}

func (v NullableBatchEntityError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchEntityError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


