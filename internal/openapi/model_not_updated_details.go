/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NotUpdatedDetails struct for NotUpdatedDetails
type NotUpdatedDetails struct {
	AttributeName *string `json:"attributeName,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewNotUpdatedDetails instantiates a new NotUpdatedDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotUpdatedDetails() *NotUpdatedDetails {
	this := NotUpdatedDetails{}
	return &this
}

// NewNotUpdatedDetailsWithDefaults instantiates a new NotUpdatedDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotUpdatedDetailsWithDefaults() *NotUpdatedDetails {
	this := NotUpdatedDetails{}
	return &this
}

// GetAttributeName returns the AttributeName field value if set, zero value otherwise.
func (o *NotUpdatedDetails) GetAttributeName() string {
	if o == nil || o.AttributeName == nil {
		var ret string
		return ret
	}
	return *o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotUpdatedDetails) GetAttributeNameOk() (*string, bool) {
	if o == nil || o.AttributeName == nil {
		return nil, false
	}
	return o.AttributeName, true
}

// HasAttributeName returns a boolean if a field has been set.
func (o *NotUpdatedDetails) HasAttributeName() bool {
	if o != nil && o.AttributeName != nil {
		return true
	}

	return false
}

// SetAttributeName gets a reference to the given string and assigns it to the AttributeName field.
func (o *NotUpdatedDetails) SetAttributeName(v string) {
	o.AttributeName = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *NotUpdatedDetails) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotUpdatedDetails) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *NotUpdatedDetails) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *NotUpdatedDetails) SetReason(v string) {
	o.Reason = &v
}

func (o NotUpdatedDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AttributeName != nil {
		toSerialize["attributeName"] = o.AttributeName
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableNotUpdatedDetails struct {
	value *NotUpdatedDetails
	isSet bool
}

func (v NullableNotUpdatedDetails) Get() *NotUpdatedDetails {
	return v.value
}

func (v *NullableNotUpdatedDetails) Set(val *NotUpdatedDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableNotUpdatedDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableNotUpdatedDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotUpdatedDetails(val *NotUpdatedDetails) *NullableNotUpdatedDetails {
	return &NullableNotUpdatedDetails{value: val, isSet: true}
}

func (v NullableNotUpdatedDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotUpdatedDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


