/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegistrationInfo struct for RegistrationInfo
type RegistrationInfo struct {
	Entities []EntityInfo `json:"entities,omitempty"`
	Properties []string `json:"properties,omitempty"`
	Relationships []string `json:"relationships,omitempty"`
}

// NewRegistrationInfo instantiates a new RegistrationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrationInfo() *RegistrationInfo {
	this := RegistrationInfo{}
	return &this
}

// NewRegistrationInfoWithDefaults instantiates a new RegistrationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrationInfoWithDefaults() *RegistrationInfo {
	this := RegistrationInfo{}
	return &this
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *RegistrationInfo) GetEntities() []EntityInfo {
	if o == nil || o.Entities == nil {
		var ret []EntityInfo
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationInfo) GetEntitiesOk() ([]EntityInfo, bool) {
	if o == nil || o.Entities == nil {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *RegistrationInfo) HasEntities() bool {
	if o != nil && o.Entities != nil {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []EntityInfo and assigns it to the Entities field.
func (o *RegistrationInfo) SetEntities(v []EntityInfo) {
	o.Entities = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *RegistrationInfo) GetProperties() []string {
	if o == nil || o.Properties == nil {
		var ret []string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationInfo) GetPropertiesOk() ([]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *RegistrationInfo) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []string and assigns it to the Properties field.
func (o *RegistrationInfo) SetProperties(v []string) {
	o.Properties = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *RegistrationInfo) GetRelationships() []string {
	if o == nil || o.Relationships == nil {
		var ret []string
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationInfo) GetRelationshipsOk() ([]string, bool) {
	if o == nil || o.Relationships == nil {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *RegistrationInfo) HasRelationships() bool {
	if o != nil && o.Relationships != nil {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []string and assigns it to the Relationships field.
func (o *RegistrationInfo) SetRelationships(v []string) {
	o.Relationships = v
}

func (o RegistrationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Relationships != nil {
		toSerialize["relationships"] = o.Relationships
	}
	return json.Marshal(toSerialize)
}

type NullableRegistrationInfo struct {
	value *RegistrationInfo
	isSet bool
}

func (v NullableRegistrationInfo) Get() *RegistrationInfo {
	return v.value
}

func (v *NullableRegistrationInfo) Set(val *RegistrationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationInfo(val *RegistrationInfo) *NullableRegistrationInfo {
	return &NullableRegistrationInfo{value: val, isSet: true}
}

func (v NullableRegistrationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


