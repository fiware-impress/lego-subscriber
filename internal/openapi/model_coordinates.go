/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Coordinates - struct for Coordinates
type Coordinates struct {
	ArrayOfArrayOfArrayOfFloat32 *[][][]float32
	ArrayOfArrayOfFloat32 *[][]float32
	ArrayOfFloat32 *[]float32
}

// [][][]float32AsCoordinates is a convenience function that returns [][][]float32 wrapped in Coordinates
func ArrayOfArrayOfArrayOfFloat32AsCoordinates(v *[][][]float32) Coordinates {
	return Coordinates{
		ArrayOfArrayOfArrayOfFloat32: v,
	}
}

// [][]float32AsCoordinates is a convenience function that returns [][]float32 wrapped in Coordinates
func ArrayOfArrayOfFloat32AsCoordinates(v *[][]float32) Coordinates {
	return Coordinates{
		ArrayOfArrayOfFloat32: v,
	}
}

// []float32AsCoordinates is a convenience function that returns []float32 wrapped in Coordinates
func ArrayOfFloat32AsCoordinates(v *[]float32) Coordinates {
	return Coordinates{
		ArrayOfFloat32: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Coordinates) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfArrayOfArrayOfFloat32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfArrayOfArrayOfFloat32)
	if err == nil {
		jsonArrayOfArrayOfArrayOfFloat32, _ := json.Marshal(dst.ArrayOfArrayOfArrayOfFloat32)
		if string(jsonArrayOfArrayOfArrayOfFloat32) == "{}" { // empty struct
			dst.ArrayOfArrayOfArrayOfFloat32 = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfArrayOfArrayOfFloat32 = nil
	}

	// try to unmarshal data into ArrayOfArrayOfFloat32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfArrayOfFloat32)
	if err == nil {
		jsonArrayOfArrayOfFloat32, _ := json.Marshal(dst.ArrayOfArrayOfFloat32)
		if string(jsonArrayOfArrayOfFloat32) == "{}" { // empty struct
			dst.ArrayOfArrayOfFloat32 = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfArrayOfFloat32 = nil
	}

	// try to unmarshal data into ArrayOfFloat32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFloat32)
	if err == nil {
		jsonArrayOfFloat32, _ := json.Marshal(dst.ArrayOfFloat32)
		if string(jsonArrayOfFloat32) == "{}" { // empty struct
			dst.ArrayOfFloat32 = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFloat32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfArrayOfArrayOfFloat32 = nil
		dst.ArrayOfArrayOfFloat32 = nil
		dst.ArrayOfFloat32 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Coordinates)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Coordinates)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Coordinates) MarshalJSON() ([]byte, error) {
	if src.ArrayOfArrayOfArrayOfFloat32 != nil {
		return json.Marshal(&src.ArrayOfArrayOfArrayOfFloat32)
	}

	if src.ArrayOfArrayOfFloat32 != nil {
		return json.Marshal(&src.ArrayOfArrayOfFloat32)
	}

	if src.ArrayOfFloat32 != nil {
		return json.Marshal(&src.ArrayOfFloat32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Coordinates) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfArrayOfArrayOfFloat32 != nil {
		return obj.ArrayOfArrayOfArrayOfFloat32
	}

	if obj.ArrayOfArrayOfFloat32 != nil {
		return obj.ArrayOfArrayOfFloat32
	}

	if obj.ArrayOfFloat32 != nil {
		return obj.ArrayOfFloat32
	}

	// all schemas are nil
	return nil
}

type NullableCoordinates struct {
	value *Coordinates
	isSet bool
}

func (v NullableCoordinates) Get() *Coordinates {
	return v.value
}

func (v *NullableCoordinates) Set(val *Coordinates) {
	v.value = val
	v.isSet = true
}

func (v NullableCoordinates) IsSet() bool {
	return v.isSet
}

func (v *NullableCoordinates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoordinates(val *Coordinates) *NullableCoordinates {
	return &NullableCoordinates{value: val, isSet: true}
}

func (v NullableCoordinates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoordinates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


