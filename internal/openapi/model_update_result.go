/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateResult struct for UpdateResult
type UpdateResult struct {
	Updated []string `json:"updated,omitempty"`
	NotUpdated []NotUpdatedDetails `json:"notUpdated,omitempty"`
}

// NewUpdateResult instantiates a new UpdateResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResult() *UpdateResult {
	this := UpdateResult{}
	return &this
}

// NewUpdateResultWithDefaults instantiates a new UpdateResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResultWithDefaults() *UpdateResult {
	this := UpdateResult{}
	return &this
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UpdateResult) GetUpdated() []string {
	if o == nil || o.Updated == nil {
		var ret []string
		return ret
	}
	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateResult) GetUpdatedOk() ([]string, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UpdateResult) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given []string and assigns it to the Updated field.
func (o *UpdateResult) SetUpdated(v []string) {
	o.Updated = v
}

// GetNotUpdated returns the NotUpdated field value if set, zero value otherwise.
func (o *UpdateResult) GetNotUpdated() []NotUpdatedDetails {
	if o == nil || o.NotUpdated == nil {
		var ret []NotUpdatedDetails
		return ret
	}
	return o.NotUpdated
}

// GetNotUpdatedOk returns a tuple with the NotUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateResult) GetNotUpdatedOk() ([]NotUpdatedDetails, bool) {
	if o == nil || o.NotUpdated == nil {
		return nil, false
	}
	return o.NotUpdated, true
}

// HasNotUpdated returns a boolean if a field has been set.
func (o *UpdateResult) HasNotUpdated() bool {
	if o != nil && o.NotUpdated != nil {
		return true
	}

	return false
}

// SetNotUpdated gets a reference to the given []NotUpdatedDetails and assigns it to the NotUpdated field.
func (o *UpdateResult) SetNotUpdated(v []NotUpdatedDetails) {
	o.NotUpdated = v
}

func (o UpdateResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.NotUpdated != nil {
		toSerialize["notUpdated"] = o.NotUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateResult struct {
	value *UpdateResult
	isSet bool
}

func (v NullableUpdateResult) Get() *UpdateResult {
	return v.value
}

func (v *NullableUpdateResult) Set(val *UpdateResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResult(val *UpdateResult) *NullableUpdateResult {
	return &NullableUpdateResult{value: val, isSet: true}
}

func (v NullableUpdateResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


