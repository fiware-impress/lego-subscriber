/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GeorelEnum the model 'GeorelEnum'
type GeorelEnum string

// List of georelEnum
const (
	EQUALS GeorelEnum = "equals"
	DISJOINT GeorelEnum = "disjoint"
	INTERSECTS GeorelEnum = "intersects"
	WITHIN GeorelEnum = "within"
	CONTAINS GeorelEnum = "contains"
	OVERLAPS GeorelEnum = "overlaps"
	NEAR__MAX_DISTANCE_D__MIN_DISTANCE_D_ GeorelEnum = "^near;((maxDistance==\\d+)|(minDistance==\\d+))$"
)

// All allowed values of GeorelEnum enum
var AllowedGeorelEnumEnumValues = []GeorelEnum{
	"equals",
	"disjoint",
	"intersects",
	"within",
	"contains",
	"overlaps",
	"^near;((maxDistance==\\d+)|(minDistance==\\d+))$",
}

func (v *GeorelEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeorelEnum(value)
	for _, existing := range AllowedGeorelEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeorelEnum", value)
}

// NewGeorelEnumFromValue returns a pointer to a valid GeorelEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeorelEnumFromValue(v string) (*GeorelEnum, error) {
	ev := GeorelEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeorelEnum: valid values are %v", v, AllowedGeorelEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeorelEnum) IsValid() bool {
	for _, existing := range AllowedGeorelEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to georelEnum value
func (v GeorelEnum) Ptr() *GeorelEnum {
	return &v
}

type NullableGeorelEnum struct {
	value *GeorelEnum
	isSet bool
}

func (v NullableGeorelEnum) Get() *GeorelEnum {
	return v.value
}

func (v *NullableGeorelEnum) Set(val *GeorelEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableGeorelEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableGeorelEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeorelEnum(val *GeorelEnum) *NullableGeorelEnum {
	return &NullableGeorelEnum{value: val, isSet: true}
}

func (v NullableGeorelEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeorelEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

