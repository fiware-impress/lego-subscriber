/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BatchOperationResult struct for BatchOperationResult
type BatchOperationResult struct {
	Success []string `json:"success,omitempty"`
	Error []BatchEntityError `json:"error,omitempty"`
}

// NewBatchOperationResult instantiates a new BatchOperationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchOperationResult() *BatchOperationResult {
	this := BatchOperationResult{}
	return &this
}

// NewBatchOperationResultWithDefaults instantiates a new BatchOperationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchOperationResultWithDefaults() *BatchOperationResult {
	this := BatchOperationResult{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *BatchOperationResult) GetSuccess() []string {
	if o == nil || o.Success == nil {
		var ret []string
		return ret
	}
	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchOperationResult) GetSuccessOk() ([]string, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *BatchOperationResult) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given []string and assigns it to the Success field.
func (o *BatchOperationResult) SetSuccess(v []string) {
	o.Success = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BatchOperationResult) GetError() []BatchEntityError {
	if o == nil || o.Error == nil {
		var ret []BatchEntityError
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchOperationResult) GetErrorOk() ([]BatchEntityError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BatchOperationResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given []BatchEntityError and assigns it to the Error field.
func (o *BatchOperationResult) SetError(v []BatchEntityError) {
	o.Error = v
}

func (o BatchOperationResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableBatchOperationResult struct {
	value *BatchOperationResult
	isSet bool
}

func (v NullableBatchOperationResult) Get() *BatchOperationResult {
	return v.value
}

func (v *NullableBatchOperationResult) Set(val *BatchOperationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchOperationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchOperationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchOperationResult(val *BatchOperationResult) *NullableBatchOperationResult {
	return &NullableBatchOperationResult{value: val, isSet: true}
}

func (v NullableBatchOperationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchOperationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


