/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ContextSourceRegistrationFragment struct for ContextSourceRegistrationFragment
type ContextSourceRegistrationFragment struct {
	Context map[string]interface{} `json:"@context,omitempty"`
	Information []RegistrationInfo `json:"information,omitempty"`
	ObservationInterval *TimeInterval `json:"observationInterval,omitempty"`
	ManagementInterval *TimeInterval `json:"managementInterval,omitempty"`
	Location *Geometry `json:"location,omitempty"`
	ObservationSpace *Geometry `json:"observationSpace,omitempty"`
	OperationSpace *Geometry `json:"operationSpace,omitempty"`
	Expires *time.Time `json:"expires,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Endpoint *string `json:"endpoint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContextSourceRegistrationFragment ContextSourceRegistrationFragment

// NewContextSourceRegistrationFragment instantiates a new ContextSourceRegistrationFragment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextSourceRegistrationFragment() *ContextSourceRegistrationFragment {
	this := ContextSourceRegistrationFragment{}
	return &this
}

// NewContextSourceRegistrationFragmentWithDefaults instantiates a new ContextSourceRegistrationFragment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextSourceRegistrationFragmentWithDefaults() *ContextSourceRegistrationFragment {
	this := ContextSourceRegistrationFragment{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetContext() map[string]interface{} {
	if o == nil || o.Context == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *ContextSourceRegistrationFragment) SetContext(v map[string]interface{}) {
	o.Context = v
}

// GetInformation returns the Information field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetInformation() []RegistrationInfo {
	if o == nil || o.Information == nil {
		var ret []RegistrationInfo
		return ret
	}
	return o.Information
}

// GetInformationOk returns a tuple with the Information field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetInformationOk() ([]RegistrationInfo, bool) {
	if o == nil || o.Information == nil {
		return nil, false
	}
	return o.Information, true
}

// HasInformation returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasInformation() bool {
	if o != nil && o.Information != nil {
		return true
	}

	return false
}

// SetInformation gets a reference to the given []RegistrationInfo and assigns it to the Information field.
func (o *ContextSourceRegistrationFragment) SetInformation(v []RegistrationInfo) {
	o.Information = v
}

// GetObservationInterval returns the ObservationInterval field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetObservationInterval() TimeInterval {
	if o == nil || o.ObservationInterval == nil {
		var ret TimeInterval
		return ret
	}
	return *o.ObservationInterval
}

// GetObservationIntervalOk returns a tuple with the ObservationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetObservationIntervalOk() (*TimeInterval, bool) {
	if o == nil || o.ObservationInterval == nil {
		return nil, false
	}
	return o.ObservationInterval, true
}

// HasObservationInterval returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasObservationInterval() bool {
	if o != nil && o.ObservationInterval != nil {
		return true
	}

	return false
}

// SetObservationInterval gets a reference to the given TimeInterval and assigns it to the ObservationInterval field.
func (o *ContextSourceRegistrationFragment) SetObservationInterval(v TimeInterval) {
	o.ObservationInterval = &v
}

// GetManagementInterval returns the ManagementInterval field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetManagementInterval() TimeInterval {
	if o == nil || o.ManagementInterval == nil {
		var ret TimeInterval
		return ret
	}
	return *o.ManagementInterval
}

// GetManagementIntervalOk returns a tuple with the ManagementInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetManagementIntervalOk() (*TimeInterval, bool) {
	if o == nil || o.ManagementInterval == nil {
		return nil, false
	}
	return o.ManagementInterval, true
}

// HasManagementInterval returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasManagementInterval() bool {
	if o != nil && o.ManagementInterval != nil {
		return true
	}

	return false
}

// SetManagementInterval gets a reference to the given TimeInterval and assigns it to the ManagementInterval field.
func (o *ContextSourceRegistrationFragment) SetManagementInterval(v TimeInterval) {
	o.ManagementInterval = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetLocation() Geometry {
	if o == nil || o.Location == nil {
		var ret Geometry
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetLocationOk() (*Geometry, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Geometry and assigns it to the Location field.
func (o *ContextSourceRegistrationFragment) SetLocation(v Geometry) {
	o.Location = &v
}

// GetObservationSpace returns the ObservationSpace field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetObservationSpace() Geometry {
	if o == nil || o.ObservationSpace == nil {
		var ret Geometry
		return ret
	}
	return *o.ObservationSpace
}

// GetObservationSpaceOk returns a tuple with the ObservationSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetObservationSpaceOk() (*Geometry, bool) {
	if o == nil || o.ObservationSpace == nil {
		return nil, false
	}
	return o.ObservationSpace, true
}

// HasObservationSpace returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasObservationSpace() bool {
	if o != nil && o.ObservationSpace != nil {
		return true
	}

	return false
}

// SetObservationSpace gets a reference to the given Geometry and assigns it to the ObservationSpace field.
func (o *ContextSourceRegistrationFragment) SetObservationSpace(v Geometry) {
	o.ObservationSpace = &v
}

// GetOperationSpace returns the OperationSpace field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetOperationSpace() Geometry {
	if o == nil || o.OperationSpace == nil {
		var ret Geometry
		return ret
	}
	return *o.OperationSpace
}

// GetOperationSpaceOk returns a tuple with the OperationSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetOperationSpaceOk() (*Geometry, bool) {
	if o == nil || o.OperationSpace == nil {
		return nil, false
	}
	return o.OperationSpace, true
}

// HasOperationSpace returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasOperationSpace() bool {
	if o != nil && o.OperationSpace != nil {
		return true
	}

	return false
}

// SetOperationSpace gets a reference to the given Geometry and assigns it to the OperationSpace field.
func (o *ContextSourceRegistrationFragment) SetOperationSpace(v Geometry) {
	o.OperationSpace = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetExpires() time.Time {
	if o == nil || o.Expires == nil {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetExpiresOk() (*time.Time, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *ContextSourceRegistrationFragment) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContextSourceRegistrationFragment) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ContextSourceRegistrationFragment) SetDescription(v string) {
	o.Description = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *ContextSourceRegistrationFragment) GetEndpoint() string {
	if o == nil || o.Endpoint == nil {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextSourceRegistrationFragment) GetEndpointOk() (*string, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ContextSourceRegistrationFragment) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *ContextSourceRegistrationFragment) SetEndpoint(v string) {
	o.Endpoint = &v
}

func (o ContextSourceRegistrationFragment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["@context"] = o.Context
	}
	if o.Information != nil {
		toSerialize["information"] = o.Information
	}
	if o.ObservationInterval != nil {
		toSerialize["observationInterval"] = o.ObservationInterval
	}
	if o.ManagementInterval != nil {
		toSerialize["managementInterval"] = o.ManagementInterval
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.ObservationSpace != nil {
		toSerialize["observationSpace"] = o.ObservationSpace
	}
	if o.OperationSpace != nil {
		toSerialize["operationSpace"] = o.OperationSpace
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ContextSourceRegistrationFragment) UnmarshalJSON(bytes []byte) (err error) {
	varContextSourceRegistrationFragment := _ContextSourceRegistrationFragment{}

	if err = json.Unmarshal(bytes, &varContextSourceRegistrationFragment); err == nil {
		*o = ContextSourceRegistrationFragment(varContextSourceRegistrationFragment)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "@context")
		delete(additionalProperties, "information")
		delete(additionalProperties, "observationInterval")
		delete(additionalProperties, "managementInterval")
		delete(additionalProperties, "location")
		delete(additionalProperties, "observationSpace")
		delete(additionalProperties, "operationSpace")
		delete(additionalProperties, "expires")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "endpoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContextSourceRegistrationFragment struct {
	value *ContextSourceRegistrationFragment
	isSet bool
}

func (v NullableContextSourceRegistrationFragment) Get() *ContextSourceRegistrationFragment {
	return v.value
}

func (v *NullableContextSourceRegistrationFragment) Set(val *ContextSourceRegistrationFragment) {
	v.value = val
	v.isSet = true
}

func (v NullableContextSourceRegistrationFragment) IsSet() bool {
	return v.isSet
}

func (v *NullableContextSourceRegistrationFragment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextSourceRegistrationFragment(val *ContextSourceRegistrationFragment) *NullableContextSourceRegistrationFragment {
	return &NullableContextSourceRegistrationFragment{value: val, isSet: true}
}

func (v NullableContextSourceRegistrationFragment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextSourceRegistrationFragment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


