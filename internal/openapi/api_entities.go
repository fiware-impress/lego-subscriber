/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// EntitiesApiService EntitiesApi service
type EntitiesApiService service

type ApiAppendEntityAttrsRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	entityId string
	requestBody *map[string]OneOfPropertyRelationshipGeoProperty
	options *string
}

func (r ApiAppendEntityAttrsRequest) NGSILDTenant(nGSILDTenant string) ApiAppendEntityAttrsRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

func (r ApiAppendEntityAttrsRequest) RequestBody(requestBody map[string]OneOfPropertyRelationshipGeoProperty) ApiAppendEntityAttrsRequest {
	r.requestBody = &requestBody
	return r
}

// Indicates that no attribute overwrite shall be performed
func (r ApiAppendEntityAttrsRequest) Options(options string) ApiAppendEntityAttrsRequest {
	r.options = &options
	return r
}

func (r ApiAppendEntityAttrsRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppendEntityAttrsExecute(r)
}

/*
AppendEntityAttrs Method for AppendEntityAttrs

Append new Entity attributes to an existing Entity within an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @return ApiAppendEntityAttrsRequest
*/
func (a *EntitiesApiService) AppendEntityAttrs(ctx context.Context, entityId string) ApiAppendEntityAttrsRequest {
	return ApiAppendEntityAttrsRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
	}
}

// Execute executes the request
func (a *EntitiesApiService) AppendEntityAttrsExecute(r ApiAppendEntityAttrsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.AppendEntityAttrs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/{entityId}/attrs/"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return nil, reportError("nGSILDTenant is required and must be specified")
	}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBatchEntityCreationRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	entity *[]Entity
}

func (r ApiBatchEntityCreationRequest) Entity(entity []Entity) ApiBatchEntityCreationRequest {
	r.entity = &entity
	return r
}

func (r ApiBatchEntityCreationRequest) Execute() (*BatchOperationResult, *http.Response, error) {
	return r.ApiService.BatchEntityCreationExecute(r)
}

/*
BatchEntityCreation Method for BatchEntityCreation

Batch Entity creation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchEntityCreationRequest
*/
func (a *EntitiesApiService) BatchEntityCreation(ctx context.Context) ApiBatchEntityCreationRequest {
	return ApiBatchEntityCreationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchOperationResult
func (a *EntitiesApiService) BatchEntityCreationExecute(r ApiBatchEntityCreationRequest) (*BatchOperationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchOperationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.BatchEntityCreation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entityOperations/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entity == nil {
		return localVarReturnValue, nil, reportError("entity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.entity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchEntityDeleteRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	requestBody *[]string
}

func (r ApiBatchEntityDeleteRequest) RequestBody(requestBody []string) ApiBatchEntityDeleteRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiBatchEntityDeleteRequest) Execute() (*BatchOperationResult, *http.Response, error) {
	return r.ApiService.BatchEntityDeleteExecute(r)
}

/*
BatchEntityDelete Method for BatchEntityDelete

Batch Entity delete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchEntityDeleteRequest
*/
func (a *EntitiesApiService) BatchEntityDelete(ctx context.Context) ApiBatchEntityDeleteRequest {
	return ApiBatchEntityDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchOperationResult
func (a *EntitiesApiService) BatchEntityDeleteExecute(r ApiBatchEntityDeleteRequest) (*BatchOperationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchOperationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.BatchEntityDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entityOperations/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}
	if len(*r.requestBody) < 1 {
		return localVarReturnValue, nil, reportError("requestBody must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchEntityUpdateRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	entity *[]Entity
	options *string
}

func (r ApiBatchEntityUpdateRequest) Entity(entity []Entity) ApiBatchEntityUpdateRequest {
	r.entity = &entity
	return r
}

func (r ApiBatchEntityUpdateRequest) Options(options string) ApiBatchEntityUpdateRequest {
	r.options = &options
	return r
}

func (r ApiBatchEntityUpdateRequest) Execute() (*BatchOperationResult, *http.Response, error) {
	return r.ApiService.BatchEntityUpdateExecute(r)
}

/*
BatchEntityUpdate Method for BatchEntityUpdate

Batch Entity update

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchEntityUpdateRequest
*/
func (a *EntitiesApiService) BatchEntityUpdate(ctx context.Context) ApiBatchEntityUpdateRequest {
	return ApiBatchEntityUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchOperationResult
func (a *EntitiesApiService) BatchEntityUpdateExecute(r ApiBatchEntityUpdateRequest) (*BatchOperationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchOperationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.BatchEntityUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entityOperations/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entity == nil {
		return localVarReturnValue, nil, reportError("entity is required and must be specified")
	}

	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.entity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchEntityUpsertRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	entity *[]Entity
	options *string
}

func (r ApiBatchEntityUpsertRequest) Entity(entity []Entity) ApiBatchEntityUpsertRequest {
	r.entity = &entity
	return r
}

func (r ApiBatchEntityUpsertRequest) Options(options string) ApiBatchEntityUpsertRequest {
	r.options = &options
	return r
}

func (r ApiBatchEntityUpsertRequest) Execute() (*BatchOperationResult, *http.Response, error) {
	return r.ApiService.BatchEntityUpsertExecute(r)
}

/*
BatchEntityUpsert Method for BatchEntityUpsert

Batch Entity upsert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchEntityUpsertRequest
*/
func (a *EntitiesApiService) BatchEntityUpsert(ctx context.Context) ApiBatchEntityUpsertRequest {
	return ApiBatchEntityUpsertRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchOperationResult
func (a *EntitiesApiService) BatchEntityUpsertExecute(r ApiBatchEntityUpsertRequest) (*BatchOperationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchOperationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.BatchEntityUpsert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entityOperations/upsert"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entity == nil {
		return localVarReturnValue, nil, reportError("entity is required and must be specified")
	}

	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.entity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateEntityRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	requestBody *map[string]OneOfPropertyRelationshipGeoProperty
}

func (r ApiCreateEntityRequest) NGSILDTenant(nGSILDTenant string) ApiCreateEntityRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

func (r ApiCreateEntityRequest) RequestBody(requestBody map[string]OneOfPropertyRelationshipGeoProperty) ApiCreateEntityRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiCreateEntityRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateEntityExecute(r)
}

/*
CreateEntity Method for CreateEntity

Create a new Entity within an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateEntityRequest
*/
func (a *EntitiesApiService) CreateEntity(ctx context.Context) ApiCreateEntityRequest {
	return ApiCreateEntityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EntitiesApiService) CreateEntityExecute(r ApiCreateEntityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.CreateEntity")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return nil, reportError("nGSILDTenant is required and must be specified")
	}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPartialAttrUpdateRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	entityId string
	attrId string
	requestBody *map[string]OneOfPropertyRelationshipGeoProperty
}

func (r ApiPartialAttrUpdateRequest) NGSILDTenant(nGSILDTenant string) ApiPartialAttrUpdateRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

func (r ApiPartialAttrUpdateRequest) RequestBody(requestBody map[string]OneOfPropertyRelationshipGeoProperty) ApiPartialAttrUpdateRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPartialAttrUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.PartialAttrUpdateExecute(r)
}

/*
PartialAttrUpdate Method for PartialAttrUpdate

Update existing Entity attributes within an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @param attrId Attribute Id
 @return ApiPartialAttrUpdateRequest
*/
func (a *EntitiesApiService) PartialAttrUpdate(ctx context.Context, entityId string, attrId string) ApiPartialAttrUpdateRequest {
	return ApiPartialAttrUpdateRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
		attrId: attrId,
	}
}

// Execute executes the request
func (a *EntitiesApiService) PartialAttrUpdateExecute(r ApiPartialAttrUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.PartialAttrUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/{entityId}/attrs/{attrId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attrId"+"}", url.PathEscape(parameterToString(r.attrId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return nil, reportError("nGSILDTenant is required and must be specified")
	}
	if strlen(r.attrId) < 1 {
		return nil, reportError("attrId must have at least 1 elements")
	}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiQueryEntitiesRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	id *string
	idPattern *string
	type_ *string
	attrs *string
	q *string
	georel *string
	geometry *string
	coordinates *string
	geoproperty *string
	csf *string
	limit *int32
	options *string
	link *string
}

func (r ApiQueryEntitiesRequest) NGSILDTenant(nGSILDTenant string) ApiQueryEntitiesRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

// Comma separated list of URIs to be retrieved
func (r ApiQueryEntitiesRequest) Id(id string) ApiQueryEntitiesRequest {
	r.id = &id
	return r
}

// Regular expression that must be matched by Entity ids
func (r ApiQueryEntitiesRequest) IdPattern(idPattern string) ApiQueryEntitiesRequest {
	r.idPattern = &idPattern
	return r
}

// Comma separated list of Entity type names to be retrieved
func (r ApiQueryEntitiesRequest) Type_(type_ string) ApiQueryEntitiesRequest {
	r.type_ = &type_
	return r
}

// Comma separated list of attribute names (properties or relationships) to be retrieved
func (r ApiQueryEntitiesRequest) Attrs(attrs string) ApiQueryEntitiesRequest {
	r.attrs = &attrs
	return r
}

// Query
func (r ApiQueryEntitiesRequest) Q(q string) ApiQueryEntitiesRequest {
	r.q = &q
	return r
}

// Geo-relationship
func (r ApiQueryEntitiesRequest) Georel(georel string) ApiQueryEntitiesRequest {
	r.georel = &georel
	return r
}

// Geometry
func (r ApiQueryEntitiesRequest) Geometry(geometry string) ApiQueryEntitiesRequest {
	r.geometry = &geometry
	return r
}

// Coordinates serialized as a string
func (r ApiQueryEntitiesRequest) Coordinates(coordinates string) ApiQueryEntitiesRequest {
	r.coordinates = &coordinates
	return r
}

// The name of the property that contains the geo-spatial data that will be used to resolve the geoquery
func (r ApiQueryEntitiesRequest) Geoproperty(geoproperty string) ApiQueryEntitiesRequest {
	r.geoproperty = &geoproperty
	return r
}

// Context Source Filter
func (r ApiQueryEntitiesRequest) Csf(csf string) ApiQueryEntitiesRequest {
	r.csf = &csf
	return r
}

// Pagination limit
func (r ApiQueryEntitiesRequest) Limit(limit int32) ApiQueryEntitiesRequest {
	r.limit = &limit
	return r
}

// Options dictionary
func (r ApiQueryEntitiesRequest) Options(options string) ApiQueryEntitiesRequest {
	r.options = &options
	return r
}

// Link header to be used as described in the json-ld spec.
func (r ApiQueryEntitiesRequest) Link(link string) ApiQueryEntitiesRequest {
	r.link = &link
	return r
}

func (r ApiQueryEntitiesRequest) Execute() ([]Entity, *http.Response, error) {
	return r.ApiService.QueryEntitiesExecute(r)
}

/*
QueryEntities Method for QueryEntities

Retrieve a set of entities which matches a specific query from an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryEntitiesRequest
*/
func (a *EntitiesApiService) QueryEntities(ctx context.Context) ApiQueryEntitiesRequest {
	return ApiQueryEntitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Entity
func (a *EntitiesApiService) QueryEntitiesExecute(r ApiQueryEntitiesRequest) ([]Entity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Entity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.QueryEntities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return localVarReturnValue, nil, reportError("nGSILDTenant is required and must be specified")
	}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.idPattern != nil {
		localVarQueryParams.Add("idPattern", parameterToString(*r.idPattern, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.attrs != nil {
		localVarQueryParams.Add("attrs", parameterToString(*r.attrs, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.georel != nil {
		localVarQueryParams.Add("georel", parameterToString(*r.georel, ""))
	}
	if r.geometry != nil {
		localVarQueryParams.Add("geometry", parameterToString(*r.geometry, ""))
	}
	if r.coordinates != nil {
		localVarQueryParams.Add("coordinates", parameterToString(*r.coordinates, ""))
	}
	if r.geoproperty != nil {
		localVarQueryParams.Add("geoproperty", parameterToString(*r.geoproperty, ""))
	}
	if r.csf != nil {
		localVarQueryParams.Add("csf", parameterToString(*r.csf, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	if r.link != nil {
		localVarHeaderParams["Link"] = parameterToString(*r.link, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveEntityAttrRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	entityId string
	attrId string
}

func (r ApiRemoveEntityAttrRequest) NGSILDTenant(nGSILDTenant string) ApiRemoveEntityAttrRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

func (r ApiRemoveEntityAttrRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveEntityAttrExecute(r)
}

/*
RemoveEntityAttr Method for RemoveEntityAttr

Removes an existing Entity attribute within an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @param attrId Attribute Id
 @return ApiRemoveEntityAttrRequest
*/
func (a *EntitiesApiService) RemoveEntityAttr(ctx context.Context, entityId string, attrId string) ApiRemoveEntityAttrRequest {
	return ApiRemoveEntityAttrRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
		attrId: attrId,
	}
}

// Execute executes the request
func (a *EntitiesApiService) RemoveEntityAttrExecute(r ApiRemoveEntityAttrRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.RemoveEntityAttr")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/{entityId}/attrs/{attrId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attrId"+"}", url.PathEscape(parameterToString(r.attrId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return nil, reportError("nGSILDTenant is required and must be specified")
	}
	if strlen(r.attrId) < 1 {
		return nil, reportError("attrId must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveEntityByIdRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	entityId string
	type_ *string
}

func (r ApiRemoveEntityByIdRequest) NGSILDTenant(nGSILDTenant string) ApiRemoveEntityByIdRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

// Entity Type
func (r ApiRemoveEntityByIdRequest) Type_(type_ string) ApiRemoveEntityByIdRequest {
	r.type_ = &type_
	return r
}

func (r ApiRemoveEntityByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveEntityByIdExecute(r)
}

/*
RemoveEntityById Method for RemoveEntityById

Removes an specific Entity from an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @return ApiRemoveEntityByIdRequest
*/
func (a *EntitiesApiService) RemoveEntityById(ctx context.Context, entityId string) ApiRemoveEntityByIdRequest {
	return ApiRemoveEntityByIdRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
	}
}

// Execute executes the request
func (a *EntitiesApiService) RemoveEntityByIdExecute(r ApiRemoveEntityByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.RemoveEntityById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/{entityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return nil, reportError("nGSILDTenant is required and must be specified")
	}

	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRetrieveEntityByIdRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	entityId string
	attrs *string
	type_ *string
	options *string
	link *string
}

func (r ApiRetrieveEntityByIdRequest) NGSILDTenant(nGSILDTenant string) ApiRetrieveEntityByIdRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

// Comma separated list of attribute names (properties or relationships) to be retrieved
func (r ApiRetrieveEntityByIdRequest) Attrs(attrs string) ApiRetrieveEntityByIdRequest {
	r.attrs = &attrs
	return r
}

// Entity Type
func (r ApiRetrieveEntityByIdRequest) Type_(type_ string) ApiRetrieveEntityByIdRequest {
	r.type_ = &type_
	return r
}

// Options dictionary
func (r ApiRetrieveEntityByIdRequest) Options(options string) ApiRetrieveEntityByIdRequest {
	r.options = &options
	return r
}

// Link header to be used as described in the json-ld spec.
func (r ApiRetrieveEntityByIdRequest) Link(link string) ApiRetrieveEntityByIdRequest {
	r.link = &link
	return r
}

func (r ApiRetrieveEntityByIdRequest) Execute() (*Entity, *http.Response, error) {
	return r.ApiService.RetrieveEntityByIdExecute(r)
}

/*
RetrieveEntityById Method for RetrieveEntityById

Retrieve an specific Entity from an NGSI-LD system. It's possible to specify the Entity attributes to be retrieved by using query parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @return ApiRetrieveEntityByIdRequest
*/
func (a *EntitiesApiService) RetrieveEntityById(ctx context.Context, entityId string) ApiRetrieveEntityByIdRequest {
	return ApiRetrieveEntityByIdRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
	}
}

// Execute executes the request
//  @return Entity
func (a *EntitiesApiService) RetrieveEntityByIdExecute(r ApiRetrieveEntityByIdRequest) (*Entity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Entity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.RetrieveEntityById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/{entityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return localVarReturnValue, nil, reportError("nGSILDTenant is required and must be specified")
	}

	if r.attrs != nil {
		localVarQueryParams.Add("attrs", parameterToString(*r.attrs, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.options != nil {
		localVarQueryParams.Add("options", parameterToString(*r.options, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	if r.link != nil {
		localVarHeaderParams["Link"] = parameterToString(*r.link, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateEntityAttrsRequest struct {
	ctx context.Context
	ApiService *EntitiesApiService
	nGSILDTenant *string
	entityId string
	requestBody *map[string]OneOfPropertyRelationshipGeoProperty
}

func (r ApiUpdateEntityAttrsRequest) NGSILDTenant(nGSILDTenant string) ApiUpdateEntityAttrsRequest {
	r.nGSILDTenant = &nGSILDTenant
	return r
}

func (r ApiUpdateEntityAttrsRequest) RequestBody(requestBody map[string]OneOfPropertyRelationshipGeoProperty) ApiUpdateEntityAttrsRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiUpdateEntityAttrsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEntityAttrsExecute(r)
}

/*
UpdateEntityAttrs Method for UpdateEntityAttrs

Update existing Entity attributes within an NGSI-LD system

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityId Entity Id
 @return ApiUpdateEntityAttrsRequest
*/
func (a *EntitiesApiService) UpdateEntityAttrs(ctx context.Context, entityId string) ApiUpdateEntityAttrsRequest {
	return ApiUpdateEntityAttrsRequest{
		ApiService: a,
		ctx: ctx,
		entityId: entityId,
	}
}

// Execute executes the request
func (a *EntitiesApiService) UpdateEntityAttrsExecute(r ApiUpdateEntityAttrsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitiesApiService.UpdateEntityAttrs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entities/{entityId}/attrs/"
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", url.PathEscape(parameterToString(r.entityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nGSILDTenant == nil {
		return nil, reportError("nGSILDTenant is required and must be specified")
	}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/ld+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/ld+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["NGSILD-Tenant"] = parameterToString(*r.nGSILDTenant, "")
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
