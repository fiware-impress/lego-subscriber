/*
ETSI ISG CIM / NGSI-LD API

This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders

API version: latest
Contact: NGSI-LD@etsi.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Entity struct for Entity
type Entity struct {
	Context map[string]interface{} `json:"@context,omitempty"`
	Location *GeoProperty `json:"location,omitempty"`
	ObservationSpace *GeoProperty `json:"observationSpace,omitempty"`
	OperationSpace *GeoProperty `json:"operationSpace,omitempty"`
	Id *string `json:"id,omitempty"`
	// NGSI-LD Name
	Type *string `json:"type,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
}

// NewEntity instantiates a new Entity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntity() *Entity {
	this := Entity{}
	return &this
}

// NewEntityWithDefaults instantiates a new Entity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityWithDefaults() *Entity {
	this := Entity{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Entity) GetContext() map[string]interface{} {
	if o == nil || o.Context == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Entity) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *Entity) SetContext(v map[string]interface{}) {
	o.Context = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Entity) GetLocation() GeoProperty {
	if o == nil || o.Location == nil {
		var ret GeoProperty
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetLocationOk() (*GeoProperty, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Entity) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given GeoProperty and assigns it to the Location field.
func (o *Entity) SetLocation(v GeoProperty) {
	o.Location = &v
}

// GetObservationSpace returns the ObservationSpace field value if set, zero value otherwise.
func (o *Entity) GetObservationSpace() GeoProperty {
	if o == nil || o.ObservationSpace == nil {
		var ret GeoProperty
		return ret
	}
	return *o.ObservationSpace
}

// GetObservationSpaceOk returns a tuple with the ObservationSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetObservationSpaceOk() (*GeoProperty, bool) {
	if o == nil || o.ObservationSpace == nil {
		return nil, false
	}
	return o.ObservationSpace, true
}

// HasObservationSpace returns a boolean if a field has been set.
func (o *Entity) HasObservationSpace() bool {
	if o != nil && o.ObservationSpace != nil {
		return true
	}

	return false
}

// SetObservationSpace gets a reference to the given GeoProperty and assigns it to the ObservationSpace field.
func (o *Entity) SetObservationSpace(v GeoProperty) {
	o.ObservationSpace = &v
}

// GetOperationSpace returns the OperationSpace field value if set, zero value otherwise.
func (o *Entity) GetOperationSpace() GeoProperty {
	if o == nil || o.OperationSpace == nil {
		var ret GeoProperty
		return ret
	}
	return *o.OperationSpace
}

// GetOperationSpaceOk returns a tuple with the OperationSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetOperationSpaceOk() (*GeoProperty, bool) {
	if o == nil || o.OperationSpace == nil {
		return nil, false
	}
	return o.OperationSpace, true
}

// HasOperationSpace returns a boolean if a field has been set.
func (o *Entity) HasOperationSpace() bool {
	if o != nil && o.OperationSpace != nil {
		return true
	}

	return false
}

// SetOperationSpace gets a reference to the given GeoProperty and assigns it to the OperationSpace field.
func (o *Entity) SetOperationSpace(v GeoProperty) {
	o.OperationSpace = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Entity) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Entity) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Entity) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Entity) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Entity) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Entity) SetType(v string) {
	o.Type = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Entity) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Entity) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Entity) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Entity) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Entity) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *Entity) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o Entity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["@context"] = o.Context
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.ObservationSpace != nil {
		toSerialize["observationSpace"] = o.ObservationSpace
	}
	if o.OperationSpace != nil {
		toSerialize["operationSpace"] = o.OperationSpace
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.ModifiedAt != nil {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

type NullableEntity struct {
	value *Entity
	isSet bool
}

func (v NullableEntity) Get() *Entity {
	return v.value
}

func (v *NullableEntity) Set(val *Entity) {
	v.value = val
	v.isSet = true
}

func (v NullableEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntity(val *Entity) *NullableEntity {
	return &NullableEntity{value: val, isSet: true}
}

func (v NullableEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


